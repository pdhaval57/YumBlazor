@page "/category"
@inject ICategoryRepository _CategoryRepository
@inject IJSRuntime _JSRuntime

<BsModel OnModalConfirmation="ConfirmDelete_Click"
         ButtonBootstrapStyle="btn-danger"
         ButtonText="Delete"
         Title="Are you sure you want to delete this Category?"></BsModel>

@if (IsProcessing)
{

    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="loading" />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div clase="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-black py-2">
                        Category List
                    </h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <div class="row">
                <div class="col-12 text-end">
                    <a href="category/create" class="btn btn-secondary"><i class="bi bi-plus-square"></i>Add Category</a>
                </div>
            </div>
        </div>
        @if (categories.Any())
        {
            <div class="table-responsive">
                <table class="table table-striped table-bordered">
                    <thead>
                        <tr>
                            <th>Category Name</th>
                            <th>Actions</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var category in categories)
                        {
                            <tr>
                                <td>@category.Name</td>
                                <td>
                                    <a href="@($"category/update/{category.Id}")" class="btn btn-primary"><i class="bi bi-pencil-square"></i>Edit</a>
                                    <button class="btn btn-danger"><i class="bi bi-trash3" @onclick="() => HandleDelete(category.Id)"></i>Delete</button>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="alert alert-info text-center">
                No categories available.
            </div>
        }
    </div>
}
@code {
    private bool IsProcessing { get; set; } = true;
    private IEnumerable<Category> categories { get; set; } = new List<Category>();
    private int DeleteCategoryId { get; set; } = 0;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCategories();
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task LoadCategories()
    {
        categories = await _CategoryRepository.GetAllAsync();
    }

    private void HandleDelete(int Id)
    {
        DeleteCategoryId = Id;
        _JSRuntime.InvokeVoidAsync("ShowConfirmationModal");
    }

    private async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        await _JSRuntime.InvokeVoidAsync("HideConfirmationModal");
        if (isConfirmed && DeleteCategoryId != 0)
        {
            var result = await _CategoryRepository.DeleteAsync(DeleteCategoryId);
            if (result)
                _JSRuntime?.ToastrSuccess("Category Delete Successfully");
            else
                _JSRuntime?.ToastrError("Error Encountered while deleting");

            await LoadCategories();
        }

        DeleteCategoryId = 0;
        IsProcessing = false;
    }
}
